# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate

context("Test InstitutionalCertificate")

model_instance <- InstitutionalCertificate$new()

test_that("release_timestamp", {
  # tests for the property `release_timestamp` (str)
  # The date the object was released.

  # uncomment below to test the property
  #expect_equal(model.instance$`release_timestamp`, "EXPECTED_RESULT")
})

test_that("status", {
  # tests for the property `status` (str)
  # The status of the metadata object.

  # uncomment below to test the property
  #expect_equal(model.instance$`status`, "EXPECTED_RESULT")
})

test_that("lab", {
  # tests for the property `lab` (str)
  # Lab associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`lab`, "EXPECTED_RESULT")
})

test_that("award", {
  # tests for the property `award` (str)
  # Grant associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`award`, "EXPECTED_RESULT")
})

test_that("schema_version", {
  # tests for the property `schema_version` (str)
  # The version of the JSON schema that the server uses to validate the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`schema_version`, "EXPECTED_RESULT")
})

test_that("uuid", {
  # tests for the property `uuid` (str)
  # The unique identifier associated with every object.

  # uncomment below to test the property
  #expect_equal(model.instance$`uuid`, "EXPECTED_RESULT")
})

test_that("notes", {
  # tests for the property `notes` (str)
  # DACC internal notes.

  # uncomment below to test the property
  #expect_equal(model.instance$`notes`, "EXPECTED_RESULT")
})

test_that("aliases", {
  # tests for the property `aliases` (List[str])
  # Lab specific identifiers to reference an object.

  # uncomment below to test the property
  #expect_equal(model.instance$`aliases`, "EXPECTED_RESULT")
})

test_that("creation_timestamp", {
  # tests for the property `creation_timestamp` (str)
  # The date the object was created.

  # uncomment below to test the property
  #expect_equal(model.instance$`creation_timestamp`, "EXPECTED_RESULT")
})

test_that("submitted_by", {
  # tests for the property `submitted_by` (str)
  # The user who submitted the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitted_by`, "EXPECTED_RESULT")
})

test_that("submitter_comment", {
  # tests for the property `submitter_comment` (str)
  # Additional information specified by the submitter to be displayed as a comment on the portal.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitter_comment`, "EXPECTED_RESULT")
})

test_that("description", {
  # tests for the property `description` (str)
  # A plain text description of the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`description`, "EXPECTED_RESULT")
})

test_that("certificate_identifier", {
  # tests for the property `certificate_identifier` (str)
  # A unique identifier for the certificate.

  # uncomment below to test the property
  #expect_equal(model.instance$`certificate_identifier`, "EXPECTED_RESULT")
})

test_that("controlled_access", {
  # tests for the property `controlled_access` (bool)
  # Indicator of whether the samples are under controlled access.

  # uncomment below to test the property
  #expect_equal(model.instance$`controlled_access`, "EXPECTED_RESULT")
})

test_that("data_use_limitation", {
  # tests for the property `data_use_limitation` (str)
  # Code indicating the limitations on data use for data generated from the applicable samples. GRU (General research use): Use of the data is limited only by the terms of the Data Use Certification: these data will be added to the dbGaP Collection. HMB (Health/medical/biomedical): Use of the data is limited to health/medical/biomedical purposes, does not include the study of population origins or ancestry. DS (Disease specific): Use of the data must be related to the specified disease. Other: any other customized limitation.

  # uncomment below to test the property
  #expect_equal(model.instance$`data_use_limitation`, "EXPECTED_RESULT")
})

test_that("data_use_limitation_modifiers", {
  # tests for the property `data_use_limitation_modifiers` (List[str])
  # Code indicating a modifier on the limitations on data use for data generated from the applicable samples. COL: Requestor must provide a letter of collaboration with the primary study investigator(s). GSO: Use of the data is limited to genetic studies only. IRB: Approval Required IRB Requestor must provide documentation of local IRB approval. MDS: Use of the data includes methods development research (e.g., development and testing of software or algorithms). NPU: Use of the data is limited to not-for-profit organizations. PUB: Requestor agrees to make results of studies using the data available to the larger scientific community.

  # uncomment below to test the property
  #expect_equal(model.instance$`data_use_limitation_modifiers`, "EXPECTED_RESULT")
})

test_that("samples", {
  # tests for the property `samples` (List[str])
  # Samples covered by this institutional certificate.

  # uncomment below to test the property
  #expect_equal(model.instance$`samples`, "EXPECTED_RESULT")
})

test_that("urls", {
  # tests for the property `urls` (List[str])
  # Link to the institutional certification form.

  # uncomment below to test the property
  #expect_equal(model.instance$`urls`, "EXPECTED_RESULT")
})

test_that("id", {
  # tests for the property `id` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`id`, "EXPECTED_RESULT")
})

test_that("type", {
  # tests for the property `type` (List[str])

  # uncomment below to test the property
  #expect_equal(model.instance$`type`, "EXPECTED_RESULT")
})

test_that("summary", {
  # tests for the property `summary` (str)
  # A summary of the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`summary`, "EXPECTED_RESULT")
})
