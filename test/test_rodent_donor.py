# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate

context("Test RodentDonor")

model_instance <- RodentDonor$new()

test_that("release_timestamp", {
  # tests for the property `release_timestamp` (str)
  # The date the object was released.

  # uncomment below to test the property
  #expect_equal(model.instance$`release_timestamp`, "EXPECTED_RESULT")
})

test_that("taxa", {
  # tests for the property `taxa` (str)
  # The species of the organism.

  # uncomment below to test the property
  #expect_equal(model.instance$`taxa`, "EXPECTED_RESULT")
})

test_that("publications", {
  # tests for the property `publications` (List[str])
  # The publications associated with this object.

  # uncomment below to test the property
  #expect_equal(model.instance$`publications`, "EXPECTED_RESULT")
})

test_that("url", {
  # tests for the property `url` (str)
  # An external resource with additional information.

  # uncomment below to test the property
  #expect_equal(model.instance$`url`, "EXPECTED_RESULT")
})

test_that("sources", {
  # tests for the property `sources` (List[str])
  # The originating lab(s) or vendor(s).

  # uncomment below to test the property
  #expect_equal(model.instance$`sources`, "EXPECTED_RESULT")
})

test_that("lot_id", {
  # tests for the property `lot_id` (str)
  # The lot identifier provided by the originating lab or vendor.

  # uncomment below to test the property
  #expect_equal(model.instance$`lot_id`, "EXPECTED_RESULT")
})

test_that("product_id", {
  # tests for the property `product_id` (str)
  # The product identifier provided by the originating lab or vendor.

  # uncomment below to test the property
  #expect_equal(model.instance$`product_id`, "EXPECTED_RESULT")
})

test_that("documents", {
  # tests for the property `documents` (List[str])
  # Documents that provide additional information (not data file).

  # uncomment below to test the property
  #expect_equal(model.instance$`documents`, "EXPECTED_RESULT")
})

test_that("lab", {
  # tests for the property `lab` (str)
  # Lab associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`lab`, "EXPECTED_RESULT")
})

test_that("award", {
  # tests for the property `award` (str)
  # Grant associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`award`, "EXPECTED_RESULT")
})

test_that("accession", {
  # tests for the property `accession` (str)
  # A unique identifier to be used to reference the object prefixed with IGVF.

  # uncomment below to test the property
  #expect_equal(model.instance$`accession`, "EXPECTED_RESULT")
})

test_that("alternate_accessions", {
  # tests for the property `alternate_accessions` (List[str])
  # Accessions previously assigned to objects that have been merged with this object.

  # uncomment below to test the property
  #expect_equal(model.instance$`alternate_accessions`, "EXPECTED_RESULT")
})

test_that("collections", {
  # tests for the property `collections` (List[str])
  # Some samples are part of particular data collections.

  # uncomment below to test the property
  #expect_equal(model.instance$`collections`, "EXPECTED_RESULT")
})

test_that("status", {
  # tests for the property `status` (str)
  # The status of the metadata object.

  # uncomment below to test the property
  #expect_equal(model.instance$`status`, "EXPECTED_RESULT")
})

test_that("revoke_detail", {
  # tests for the property `revoke_detail` (str)
  # Explanation of why an object was transitioned to the revoked status.

  # uncomment below to test the property
  #expect_equal(model.instance$`revoke_detail`, "EXPECTED_RESULT")
})

test_that("schema_version", {
  # tests for the property `schema_version` (str)
  # The version of the JSON schema that the server uses to validate the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`schema_version`, "EXPECTED_RESULT")
})

test_that("uuid", {
  # tests for the property `uuid` (str)
  # The unique identifier associated with every object.

  # uncomment below to test the property
  #expect_equal(model.instance$`uuid`, "EXPECTED_RESULT")
})

test_that("notes", {
  # tests for the property `notes` (str)
  # DACC internal notes.

  # uncomment below to test the property
  #expect_equal(model.instance$`notes`, "EXPECTED_RESULT")
})

test_that("aliases", {
  # tests for the property `aliases` (List[str])
  # Lab specific identifiers to reference an object.

  # uncomment below to test the property
  #expect_equal(model.instance$`aliases`, "EXPECTED_RESULT")
})

test_that("creation_timestamp", {
  # tests for the property `creation_timestamp` (str)
  # The date the object was created.

  # uncomment below to test the property
  #expect_equal(model.instance$`creation_timestamp`, "EXPECTED_RESULT")
})

test_that("submitted_by", {
  # tests for the property `submitted_by` (str)
  # The user who submitted the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitted_by`, "EXPECTED_RESULT")
})

test_that("submitter_comment", {
  # tests for the property `submitter_comment` (str)
  # Additional information specified by the submitter to be displayed as a comment on the portal.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitter_comment`, "EXPECTED_RESULT")
})

test_that("description", {
  # tests for the property `description` (str)
  # A plain text description of the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`description`, "EXPECTED_RESULT")
})

test_that("dbxrefs", {
  # tests for the property `dbxrefs` (List[str])
  # Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF donors.

  # uncomment below to test the property
  #expect_equal(model.instance$`dbxrefs`, "EXPECTED_RESULT")
})

test_that("sex", {
  # tests for the property `sex` (str)
  # Sex of the donor.

  # uncomment below to test the property
  #expect_equal(model.instance$`sex`, "EXPECTED_RESULT")
})

test_that("phenotypic_features", {
  # tests for the property `phenotypic_features` (List[str])
  # A list of associated phenotypic features of the donor.

  # uncomment below to test the property
  #expect_equal(model.instance$`phenotypic_features`, "EXPECTED_RESULT")
})

test_that("virtual", {
  # tests for the property `virtual` (bool)
  # Virtual donors are not representing actual human or model organism donors, samples coming from which were used in experiments, but rather capturing metadata about hypothetical donors that the reported analysis results are relevant for.

  # uncomment below to test the property
  #expect_equal(model.instance$`virtual`, "EXPECTED_RESULT")
})

test_that("strain_background", {
  # tests for the property `strain_background` (str)
  # The specific parent strain designation of a non-human donor.

  # uncomment below to test the property
  #expect_equal(model.instance$`strain_background`, "EXPECTED_RESULT")
})

test_that("strain", {
  # tests for the property `strain` (str)
  # The specific strain designation of a non-human donor.

  # uncomment below to test the property
  #expect_equal(model.instance$`strain`, "EXPECTED_RESULT")
})

test_that("genotype", {
  # tests for the property `genotype` (str)
  # The genotype of the strain according to accepted nomenclature conventions.

  # uncomment below to test the property
  #expect_equal(model.instance$`genotype`, "EXPECTED_RESULT")
})

test_that("individual_rodent", {
  # tests for the property `individual_rodent` (bool)
  # This rodent donor represents an individual rodent.

  # uncomment below to test the property
  #expect_equal(model.instance$`individual_rodent`, "EXPECTED_RESULT")
})

test_that("rodent_identifier", {
  # tests for the property `rodent_identifier` (str)
  # The identifier for this individual rodent donor.

  # uncomment below to test the property
  #expect_equal(model.instance$`rodent_identifier`, "EXPECTED_RESULT")
})

test_that("id", {
  # tests for the property `id` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`id`, "EXPECTED_RESULT")
})

test_that("type", {
  # tests for the property `type` (List[str])

  # uncomment below to test the property
  #expect_equal(model.instance$`type`, "EXPECTED_RESULT")
})

test_that("summary", {
  # tests for the property `summary` (str)
  # A summary of the rodent donor.

  # uncomment below to test the property
  #expect_equal(model.instance$`summary`, "EXPECTED_RESULT")
})
