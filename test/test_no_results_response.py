# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate

context("Test NoResultsResponse")

model_instance <- NoResultsResponse$new()

test_that("context", {
  # tests for the property `context` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`context`, "EXPECTED_RESULT")
})

test_that("graph", {
  # tests for the property `graph` (List[object])

  # uncomment below to test the property
  #expect_equal(model.instance$`graph`, "EXPECTED_RESULT")
})

test_that("id", {
  # tests for the property `id` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`id`, "EXPECTED_RESULT")
})

test_that("type", {
  # tests for the property `type` (List[str])

  # uncomment below to test the property
  #expect_equal(model.instance$`type`, "EXPECTED_RESULT")
})

test_that("clear_filters", {
  # tests for the property `clear_filters` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`clear_filters`, "EXPECTED_RESULT")
})

test_that("columns", {
  # tests for the property `columns` (Dict[str, NoResultsResponseColumnsValue])

  # uncomment below to test the property
  #expect_equal(model.instance$`columns`, "EXPECTED_RESULT")
})

test_that("facet_groups", {
  # tests for the property `facet_groups` (List[NoResultsResponseFacetGroupsInner])

  # uncomment below to test the property
  #expect_equal(model.instance$`facet_groups`, "EXPECTED_RESULT")
})

test_that("facets", {
  # tests for the property `facets` (List[NoResultsResponseFacetsInner])

  # uncomment below to test the property
  #expect_equal(model.instance$`facets`, "EXPECTED_RESULT")
})

test_that("filters", {
  # tests for the property `filters` (List[NoResultsResponseFiltersInner])

  # uncomment below to test the property
  #expect_equal(model.instance$`filters`, "EXPECTED_RESULT")
})

test_that("notification", {
  # tests for the property `notification` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`notification`, "EXPECTED_RESULT")
})

test_that("sort", {
  # tests for the property `sort` (Dict[str, NoResultsResponseSortValue])

  # uncomment below to test the property
  #expect_equal(model.instance$`sort`, "EXPECTED_RESULT")
})

test_that("title", {
  # tests for the property `title` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`title`, "EXPECTED_RESULT")
})

test_that("total", {
  # tests for the property `total` (int)

  # uncomment below to test the property
  #expect_equal(model.instance$`total`, "EXPECTED_RESULT")
})
