# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate

context("Test PredictionSet")

model_instance <- PredictionSet$new()

test_that("input_file_sets", {
  # tests for the property `input_file_sets` (List[str])
  # The file set(s) required for this prediction set.

  # uncomment below to test the property
  #expect_equal(model.instance$`input_file_sets`, "EXPECTED_RESULT")
})

test_that("small_scale_loci_list", {
  # tests for the property `small_scale_loci_list` (List[object])
  # A small scale (&lt;&#x3D;100) list of specific chromosomal region(s) whose functionality is investigated in this prediction set. This property describes the input variables of the prediction set. For example, this list consists of the genetic variants whose functionality is predicted in this prediction set.

  # uncomment below to test the property
  #expect_equal(model.instance$`small_scale_loci_list`, "EXPECTED_RESULT")
})

test_that("large_scale_loci_list", {
  # tests for the property `large_scale_loci_list` (str)
  # A large scale list (&gt;100) of specific chromosomal regions whose functionality is investigated in this prediction set. This property describes the input variables of the prediction set. For example, this list consists of the genetic variants whose functionality is predicted in this prediction set.

  # uncomment below to test the property
  #expect_equal(model.instance$`large_scale_loci_list`, "EXPECTED_RESULT")
})

test_that("small_scale_gene_list", {
  # tests for the property `small_scale_gene_list` (List[str])
  # The specific, small scale list of (&lt;&#x3D;100) gene(s) whose functionality is investigated in this prediction set. This property describes the input variables of the prediction set. For example, this list consists of the genes whose expression level is predicted in this prediction set. It differs from assessed_genes (see more information under assessed_genes).

  # uncomment below to test the property
  #expect_equal(model.instance$`small_scale_gene_list`, "EXPECTED_RESULT")
})

test_that("large_scale_gene_list", {
  # tests for the property `large_scale_gene_list` (str)
  # The large scale list of (&gt;100 genes) whose functionality is investigated in this prediction set. This property describes the input variables of the prediction set. For example, this list consists of the genes whose expression level is predicted in this prediction set. It differs from assessed_genes (see more information under assessed_genes).

  # uncomment below to test the property
  #expect_equal(model.instance$`large_scale_gene_list`, "EXPECTED_RESULT")
})

test_that("release_timestamp", {
  # tests for the property `release_timestamp` (str)
  # The date the object was released.

  # uncomment below to test the property
  #expect_equal(model.instance$`release_timestamp`, "EXPECTED_RESULT")
})

test_that("publications", {
  # tests for the property `publications` (List[str])
  # The publications associated with this object.

  # uncomment below to test the property
  #expect_equal(model.instance$`publications`, "EXPECTED_RESULT")
})

test_that("documents", {
  # tests for the property `documents` (List[str])
  # Documents that provide additional information (not data file).

  # uncomment below to test the property
  #expect_equal(model.instance$`documents`, "EXPECTED_RESULT")
})

test_that("lab", {
  # tests for the property `lab` (str)
  # Lab associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`lab`, "EXPECTED_RESULT")
})

test_that("award", {
  # tests for the property `award` (str)
  # Grant associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`award`, "EXPECTED_RESULT")
})

test_that("accession", {
  # tests for the property `accession` (str)
  # A unique identifier to be used to reference the object prefixed with IGVF.

  # uncomment below to test the property
  #expect_equal(model.instance$`accession`, "EXPECTED_RESULT")
})

test_that("alternate_accessions", {
  # tests for the property `alternate_accessions` (List[str])
  # Accessions previously assigned to objects that have been merged with this object.

  # uncomment below to test the property
  #expect_equal(model.instance$`alternate_accessions`, "EXPECTED_RESULT")
})

test_that("collections", {
  # tests for the property `collections` (List[str])
  # Some samples are part of particular data collections.

  # uncomment below to test the property
  #expect_equal(model.instance$`collections`, "EXPECTED_RESULT")
})

test_that("status", {
  # tests for the property `status` (str)
  # The status of the metadata object.

  # uncomment below to test the property
  #expect_equal(model.instance$`status`, "EXPECTED_RESULT")
})

test_that("revoke_detail", {
  # tests for the property `revoke_detail` (str)
  # Explanation of why an object was transitioned to the revoked status.

  # uncomment below to test the property
  #expect_equal(model.instance$`revoke_detail`, "EXPECTED_RESULT")
})

test_that("url", {
  # tests for the property `url` (str)
  # An external resource with additional information.

  # uncomment below to test the property
  #expect_equal(model.instance$`url`, "EXPECTED_RESULT")
})

test_that("schema_version", {
  # tests for the property `schema_version` (str)
  # The version of the JSON schema that the server uses to validate the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`schema_version`, "EXPECTED_RESULT")
})

test_that("uuid", {
  # tests for the property `uuid` (str)
  # The unique identifier associated with every object.

  # uncomment below to test the property
  #expect_equal(model.instance$`uuid`, "EXPECTED_RESULT")
})

test_that("notes", {
  # tests for the property `notes` (str)
  # DACC internal notes.

  # uncomment below to test the property
  #expect_equal(model.instance$`notes`, "EXPECTED_RESULT")
})

test_that("aliases", {
  # tests for the property `aliases` (List[str])
  # Lab specific identifiers to reference an object.

  # uncomment below to test the property
  #expect_equal(model.instance$`aliases`, "EXPECTED_RESULT")
})

test_that("creation_timestamp", {
  # tests for the property `creation_timestamp` (str)
  # The date the object was created.

  # uncomment below to test the property
  #expect_equal(model.instance$`creation_timestamp`, "EXPECTED_RESULT")
})

test_that("submitted_by", {
  # tests for the property `submitted_by` (str)
  # The user who submitted the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitted_by`, "EXPECTED_RESULT")
})

test_that("submitter_comment", {
  # tests for the property `submitter_comment` (str)
  # Additional information specified by the submitter to be displayed as a comment on the portal.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitter_comment`, "EXPECTED_RESULT")
})

test_that("description", {
  # tests for the property `description` (str)
  # A plain text description of the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`description`, "EXPECTED_RESULT")
})

test_that("dbxrefs", {
  # tests for the property `dbxrefs` (List[str])
  # Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF file sets.

  # uncomment below to test the property
  #expect_equal(model.instance$`dbxrefs`, "EXPECTED_RESULT")
})

test_that("samples", {
  # tests for the property `samples` (List[str])
  # The sample(s) associated with this file set.

  # uncomment below to test the property
  #expect_equal(model.instance$`samples`, "EXPECTED_RESULT")
})

test_that("donors", {
  # tests for the property `donors` (List[str])
  # The donor(s) associated with this file set.

  # uncomment below to test the property
  #expect_equal(model.instance$`donors`, "EXPECTED_RESULT")
})

test_that("file_set_type", {
  # tests for the property `file_set_type` (str)
  # The category that best describes this prediction set.

  # uncomment below to test the property
  #expect_equal(model.instance$`file_set_type`, "EXPECTED_RESULT")
})

test_that("scope", {
  # tests for the property `scope` (str)
  # The scope or scale that this prediction set is designed to target. If the scope is across gene(s) or loci, these will need to be specified in the genes or loci property.

  # uncomment below to test the property
  #expect_equal(model.instance$`scope`, "EXPECTED_RESULT")
})

test_that("assessed_genes", {
  # tests for the property `assessed_genes` (List[str])
  # A list of gene(s) assessed in this prediction set. This property is used to describe the gene(s) being investigated, especially how the input variables in the prediction set affect some critical functionality of the gene(s). For example, the effect could be predicted from genetic variants on the binding affinity of a transcription factor encoded by a gene (assessed_genes). It differs from small_scale_gene_list and large_scale_gene_list, as these are used when the input variables of the prediction set are genes.

  # uncomment below to test the property
  #expect_equal(model.instance$`assessed_genes`, "EXPECTED_RESULT")
})

test_that("id", {
  # tests for the property `id` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`id`, "EXPECTED_RESULT")
})

test_that("type", {
  # tests for the property `type` (List[str])

  # uncomment below to test the property
  #expect_equal(model.instance$`type`, "EXPECTED_RESULT")
})

test_that("summary", {
  # tests for the property `summary` (str)
  # A summary of the prediction set.

  # uncomment below to test the property
  #expect_equal(model.instance$`summary`, "EXPECTED_RESULT")
})

test_that("files", {
  # tests for the property `files` (List[str])
  # The files associated with this file set.

  # uncomment below to test the property
  #expect_equal(model.instance$`files`, "EXPECTED_RESULT")
})

test_that("control_for", {
  # tests for the property `control_for` (List[str])
  # The file sets for which this file set is a control.

  # uncomment below to test the property
  #expect_equal(model.instance$`control_for`, "EXPECTED_RESULT")
})

test_that("submitted_files_timestamp", {
  # tests for the property `submitted_files_timestamp` (str)
  # The timestamp the first file object in the file_set or associated auxiliary sets was created.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitted_files_timestamp`, "EXPECTED_RESULT")
})

test_that("input_file_set_for", {
  # tests for the property `input_file_set_for` (List[str])
  # The file sets that use this file set as an input.

  # uncomment below to test the property
  #expect_equal(model.instance$`input_file_set_for`, "EXPECTED_RESULT")
})
