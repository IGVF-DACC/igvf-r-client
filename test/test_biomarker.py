# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate

context("Test Biomarker")

model_instance <- Biomarker$new()

test_that("release_timestamp", {
  # tests for the property `release_timestamp` (str)
  # The date the object was released.

  # uncomment below to test the property
  #expect_equal(model.instance$`release_timestamp`, "EXPECTED_RESULT")
})

test_that("status", {
  # tests for the property `status` (str)
  # The status of the metadata object.

  # uncomment below to test the property
  #expect_equal(model.instance$`status`, "EXPECTED_RESULT")
})

test_that("lab", {
  # tests for the property `lab` (str)
  # Lab associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`lab`, "EXPECTED_RESULT")
})

test_that("award", {
  # tests for the property `award` (str)
  # Grant associated with the submission.

  # uncomment below to test the property
  #expect_equal(model.instance$`award`, "EXPECTED_RESULT")
})

test_that("schema_version", {
  # tests for the property `schema_version` (str)
  # The version of the JSON schema that the server uses to validate the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`schema_version`, "EXPECTED_RESULT")
})

test_that("uuid", {
  # tests for the property `uuid` (str)
  # The unique identifier associated with every object.

  # uncomment below to test the property
  #expect_equal(model.instance$`uuid`, "EXPECTED_RESULT")
})

test_that("notes", {
  # tests for the property `notes` (str)
  # DACC internal notes.

  # uncomment below to test the property
  #expect_equal(model.instance$`notes`, "EXPECTED_RESULT")
})

test_that("aliases", {
  # tests for the property `aliases` (List[str])
  # Lab specific identifiers to reference an object.

  # uncomment below to test the property
  #expect_equal(model.instance$`aliases`, "EXPECTED_RESULT")
})

test_that("creation_timestamp", {
  # tests for the property `creation_timestamp` (str)
  # The date the object was created.

  # uncomment below to test the property
  #expect_equal(model.instance$`creation_timestamp`, "EXPECTED_RESULT")
})

test_that("submitted_by", {
  # tests for the property `submitted_by` (str)
  # The user who submitted the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitted_by`, "EXPECTED_RESULT")
})

test_that("submitter_comment", {
  # tests for the property `submitter_comment` (str)
  # Additional information specified by the submitter to be displayed as a comment on the portal.

  # uncomment below to test the property
  #expect_equal(model.instance$`submitter_comment`, "EXPECTED_RESULT")
})

test_that("description", {
  # tests for the property `description` (str)
  # A plain text description of the object.

  # uncomment below to test the property
  #expect_equal(model.instance$`description`, "EXPECTED_RESULT")
})

test_that("name", {
  # tests for the property `name` (str)
  # The biomarker name.

  # uncomment below to test the property
  #expect_equal(model.instance$`name`, "EXPECTED_RESULT")
})

test_that("classification", {
  # tests for the property `classification` (str)
  # Sample specific biomarker.

  # uncomment below to test the property
  #expect_equal(model.instance$`classification`, "EXPECTED_RESULT")
})

test_that("quantification", {
  # tests for the property `quantification` (str)
  # The biomarker association to the biosample, disease or other condition.  This can be the absence of the biomarker or the presence of the biomarker in some low, intermediate or high quantity.

  # uncomment below to test the property
  #expect_equal(model.instance$`quantification`, "EXPECTED_RESULT")
})

test_that("synonyms", {
  # tests for the property `synonyms` (List[str])
  # Alternate names for this biomarker.

  # uncomment below to test the property
  #expect_equal(model.instance$`synonyms`, "EXPECTED_RESULT")
})

test_that("gene", {
  # tests for the property `gene` (str)
  # Biomarker gene.

  # uncomment below to test the property
  #expect_equal(model.instance$`gene`, "EXPECTED_RESULT")
})

test_that("id", {
  # tests for the property `id` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`id`, "EXPECTED_RESULT")
})

test_that("type", {
  # tests for the property `type` (List[str])

  # uncomment below to test the property
  #expect_equal(model.instance$`type`, "EXPECTED_RESULT")
})

test_that("summary", {
  # tests for the property `summary` (str)

  # uncomment below to test the property
  #expect_equal(model.instance$`summary`, "EXPECTED_RESULT")
})

test_that("name_quantification", {
  # tests for the property `name_quantification` (str)
  # A concatenation of the name and quantification of the biomarker.

  # uncomment below to test the property
  #expect_equal(model.instance$`name_quantification`, "EXPECTED_RESULT")
})

test_that("biomarker_for", {
  # tests for the property `biomarker_for` (List[str])
  # The samples which have been confirmed to have this biomarker.

  # uncomment below to test the property
  #expect_equal(model.instance$`biomarker_for`, "EXPECTED_RESULT")
})
